/* Load all required BIOS/XDC runtime packages */
var Memory                      =   xdc.useModule('xdc.runtime.Memory');
var BIOS                        =   xdc.useModule('ti.sysbios.BIOS');
var HeapMem                     =   xdc.useModule('ti.sysbios.heaps.HeapMem');
var HeapBuf                     =   xdc.useModule('ti.sysbios.heaps.HeapBuf');
var Log                         =   xdc.useModule('xdc.runtime.Log');
var Semaphore                   =   xdc.useModule('ti.sysbios.knl.Semaphore');
var Hwi                         =   xdc.useModule('ti.sysbios.family.c64p.Hwi');
var ECM                         =   xdc.useModule('ti.sysbios.family.c64p.EventCombiner');
var core                        =   xdc.useModule('ti.sysbios.hal.Core');
var Cache       				=   xdc.useModule ("ti.sysbios.hal.Cache");
var Timer = xdc.useModule('ti.sysbios.hal.Timer');
var Swi = xdc.useModule('ti.sysbios.knl.Swi');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Load = xdc.useModule('ti.sysbios.utils.Load');
var LoggingSetup = xdc.useModule('ti.uia.sysbios.LoggingSetup');

var devType = "omapl138"

/* Load the OSAL package */ 
var osType = "tirtos"
var Osal = xdc.useModule('ti.osal.Settings');
Osal.osType = osType;
Osal.socType = devType;

/* Load the uart package */
var Uart = xdc.useModule('ti.drv.uart.Settings');
Uart.socType = devType;

/*use CSL package*/
var Csl = xdc.loadPackage('ti.csl');
Csl.Settings.deviceType = devType;

/* Load the Board package and set the board name */
var Board = xdc.loadPackage('ti.board');
Board.Settings.boardName = "lcdkOMAPL138";

/* Load Profiling package */
/*var Utils = xdc.loadPackage('ti.utils.profiling');*/

/* Load the gpio package */
var Gpio = xdc.loadPackage('ti.drv.gpio');
Gpio.Settings.enableProfiling = false;    
Gpio.Settings.socType = devType;

/* Load the I2C package  - required by board */
var I2c = xdc.loadPackage('ti.drv.i2c');
I2c.Settings.socType = devType;

var System                      =   xdc.useModule('xdc.runtime.System');
SysStd                          =   xdc.useModule('xdc.runtime.SysStd');
System.SupportProxy             =   SysStd;

/* Load and use the CSL packages */
var Csl                         = xdc.useModule('ti.csl.Settings');
Csl.deviceType                  = devType;

/* Create a default system heap using ti.bios.HeapMem. */
var heapMemParams1              =   new HeapMem.Params;
heapMemParams1.size             =   8192 * 25;
heapMemParams1.sectionName      =   "systemHeap";
Program.global.heap0            =   HeapMem.create(heapMemParams1);

/* This is the default memory heap. */
Memory.defaultHeapInstance      =   Program.global.heap0;

Program.sectMap["systemHeap"]   =   Program.platform.stackMemory;
Program.sectMap[".fardata:benchmarking"] = new Program.SectionSpec();
Program.sectMap[".fardata:benchmarking"].loadSegment = "APP_CACHED_DATA_BLK2_MEM";

Program.sectMap[".text:_c_int00"]                 = new Program.SectionSpec();
Program.sectMap[".text:_c_int00"].loadSegment     = "APP_CACHED_DATA_BLK1_MEM";

/****** IPC - Shared Memory Settings ********/
/* IPC packages */

var memmap                      = Program.cpu.memoryMap;

/*Startup = xdc.useModule('xdc.runtime.Startup');
Startup.firstFxns.$add('&myStartupFxn');*/

/* Enable BIOS Task Scheduler */
BIOS.taskEnabled                =   true;

/*
 * Enable Event Groups here and registering of ISR for specific GEM INTC is done
 * using EventCombiner_dispatchPlug() and Hwi_eventMap() APIs
 */
var timer0Params = new Timer.Params();
timer0Params.instance.name = "timer";
timer0Params.period = 100;
Program.global.timer = Timer.create(-1, "&timer_func", timer0Params);

var task0Params = new Task.Params();
task0Params.instance.name = "task1";
Program.global.task1 = Task.create("&task1_func", task0Params);
var semaphore0Params = new Semaphore.Params();
semaphore0Params.instance.name = "sem1";
Program.global.sem1 = Semaphore.create(null, semaphore0Params);
Load.hwiEnabled = true;
Load.swiEnabled = true;
Load.taskEnabled = true;
var swi0Params = new Swi.Params();
swi0Params.instance.name = "swi1";
Program.global.swi1 = Swi.create("&swi1_func", swi0Params);
LoggingSetup.sysbiosSwiLogging = true;
LoggingSetup.sysbiosHwiLogging = true;
LoggingSetup.sysbiosSemaphoreLogging = true;
LoggingSetup.loadHwiLogging = true;
LoggingSetup.loadSwiLogging = true;
LoggingSetup.loadTaskLogging = true;
